{"version":3,"file":"static/js/415.c77c2e4b.chunk.js","mappings":"2QAEaA,EAAOC,EAAAA,GAAAA,GAAH,+CAIJC,EAAmBD,EAAAA,GAAAA,GAAH,yNAYhBE,EAAYF,EAAAA,GAAAA,IAAH,iOAUTG,EAAkBH,EAAAA,GAAAA,IAAH,sEAKfI,EAAcJ,EAAAA,GAAAA,IAAH,0CAIXK,EAAaL,EAAAA,GAAAA,KAAH,gDAIVM,EAAcN,EAAAA,GAAAA,IAAH,wE,SCpBxB,EAnBgB,SAAC,GAAc,IAAD,IAAXO,EAAW,EAAXA,KACPC,EAA4DD,EAA5DC,eAAgBC,EAA4CF,EAA5CE,OAAQC,EAAoCH,EAApCG,WAAYC,EAAwBJ,EAAxBI,QAASC,EAAeL,EAAfK,WAErD,OACI,UAACX,EAAD,YACI,UAACC,EAAD,YACI,UAACC,EAAD,YACI,SAACC,EAAD,CAAaS,IAAK,UAAAN,EAAKC,sBAAL,mBAAqBM,mBAArB,SAAkCC,SAAS,UAAYP,EAAeM,YAAYE,MAAM,GAAxF,yCAA+HJ,GAAcK,IAAI,MACnK,SAACZ,EAAD,UAAaI,QAEjB,0BAAOC,QAEX,SAACJ,EAAD,WACI,uBAAIK,QAInB,ECUD,EAtBqB,WACjB,IAAMO,GAASC,EAAAA,EAAAA,MACf,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAA2BN,EAAOO,IAAIC,MAAK,SAACnB,GACxC,GAAoB,IAAhBA,EAAKoB,OACL,OAAOC,EAAAA,OAAAA,KAAY,mCAEvBN,EAAWf,EACd,GACJ,GAAE,CAACW,EAAOO,MAGP,+BACI,SAAC1B,EAAD,UACKsB,EAAQM,OAAS,GAAKN,EAAQQ,KAAI,SAACC,GAAD,OAAa,SAAC,EAAD,CAA0BvB,KAAMuB,GAAlBA,EAAQL,GAAnC,OAIlD,C,2KCzBKM,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,EAAAA,EAAAA,IAAA,iCAAoCF,EAApC,2BADpB,cACGG,EADH,yBAEIA,EAAS3B,KAAK4B,SAFlB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAqCC,GAArC,uFACoBJ,EAAAA,EAAAA,IAAA,gCAAmCF,EAAnC,iCAAmEM,EAAnE,gCADpB,cACGH,EADH,yBAEIA,EAAS3B,KAAK4B,SAFlB,kEAUA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAAgDR,EAAhD,2BADpB,cACGG,EADH,yBAEIA,EAAS3B,KAAK4B,SAFlB,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAAgDR,EAAhD,2BADpB,cACGG,EADH,yBAEIA,EAAS3B,KAAKkC,MAFlB,kEAtBPR,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/MovieReviews/Reviews/Reviews.styled.jsx","components/MovieReviews/Reviews/Reviews.jsx","components/MovieReviews/MovieReviews.jsx","services/API.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n`;\n\nexport const ContainerReviews = styled.li`\n    margin-top: 20px;\n    width: 100%;\n    border-radius: 10px;\n    overflow: hidden;\n    line-height: 1.5;\n\n    @media screen and (max-width: 480px) {\n        max-width: 300px;\n    }\n`;\n\nexport const PanelInfo = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    border-color: #eae1e1;\n`;\n\nexport const ContainerAvatar = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const ImageAvatar = styled.img`\n    width: 30px;\n`;\n\nexport const AvatarName = styled.span`\n    margin-left: 10px;\n`;\n\nexport const ReviewsData = styled.div`\n    border-color: #ffffff;\n    padding: 20px;\n`;","import { ContainerAvatar, AvatarName, ImageAvatar, ReviewsData, PanelInfo, ContainerReviews } from \"./Reviews.styled\";\n\nconst Reviews = ({ data }) => {\n    const { author_details, author, created_at, content, avatarPath } = data;\n\n    return (\n        <ContainerReviews>\n            <PanelInfo>\n                <ContainerAvatar>\n                    <ImageAvatar src={data.author_details?.avatar_path?.includes(\"https:\") ? author_details.avatar_path.slice(1) : `https://www.gravatar.com/avatar${avatarPath}`} alt=\"\" />\n                    <AvatarName>{author}</AvatarName>\n                </ContainerAvatar>\n                <span>{created_at}</span>\n            </PanelInfo>\n            <ReviewsData>\n                <p>{content}</p>\n            </ReviewsData>\n        </ContainerReviews>\n    );\n};\n\nexport default Reviews;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Notify } from \"notiflix/build/notiflix-aio\";\nimport * as FetchAPI from \"../../services/API\";\nimport Reviews from \"./Reviews\";\nimport { List } from \"./Reviews/Reviews.styled\";\n\nconst MovieReviews = () => {\n    const params = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        FetchAPI.fetchMovieReviews(params.id).then((data) => {\n            if (data.length === 0) {\n                return Notify.info(\"Sorry... reviews list is empty!\");\n            }\n            setReviews(data);\n        });\n    }, [params.id]);\n\n    return (\n        <>\n            <List>\n                {reviews.length > 0 && reviews.map((element) => <Reviews key={element.id} data={element} />)}\n            </List>\n        </>\n    );\n};\n\nexport default MovieReviews;","import axios from \"axios\";\n\nconst API_KEY = \"41fd8802ca4c37bec04d22336b2830f1\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\n\nexport async function fetchPopularFilms() {\n    const response = await axios.get(`/movie/popular?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n}\n\nexport async function fetchSearchFilmByName(filmName) {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&language=en-US&query=${filmName}&page=1&include_adult=false`);\n    return response.data.results;\n}\n\nexport async function fetchFilmInfo(movie_id) {\n    const response = await axios.get(`/movie/${movie_id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport async function fetchMovieReviews(movie_id) {\n    const response = await axios.get(`/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n}\n\nexport async function fetchMovieCredits(movie_id) {\n    const response = await axios.get(`/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.cast;\n}"],"names":["List","styled","ContainerReviews","PanelInfo","ContainerAvatar","ImageAvatar","AvatarName","ReviewsData","data","author_details","author","created_at","content","avatarPath","src","avatar_path","includes","slice","alt","params","useParams","useState","reviews","setReviews","useEffect","FetchAPI","id","then","length","Notify","map","element","API_KEY","fetchPopularFilms","axios","response","results","fetchSearchFilmByName","filmName","fetchMovieReviews","movie_id","fetchMovieCredits","cast"],"sourceRoot":""}